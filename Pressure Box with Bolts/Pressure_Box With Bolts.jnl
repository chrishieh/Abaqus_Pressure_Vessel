from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=2.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.0, 0.0), 
    point2=(0.225, -0.15))
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    0.0838877409696579, 0.0221644639968872), value=0.38, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[3], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0])
mdb.models['Model-1'].sketches['__profile__'].dimensions[0].setValues(value=
    0.375)
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.0, 0.0), 
    point2=(0.425, -0.05))
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.0, 0.0), 
    point2=(0.05, -0.275))
mdb.models['Model-1'].sketches['__profile__'].DistanceDimension(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[8], textPoint=(
    0.0295801013708115, 0.0329481065273285), value=0.04)
mdb.models['Model-1'].sketches['__profile__'].dimensions[0].setValues(value=
    0.03876)
mdb.models['Model-1'].sketches['__profile__'].EqualLengthConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].DistanceDimension(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[8], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], textPoint=(
    0.228190913796425, 0.046319842338562), value=0.375)
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    -0.0309341102838516, -0.0938675403594971), value=0.1525, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[4])
mdb.models['Model-1'].sketches['__profile__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0], points=((
    0.00562, -0.06125), (0.0, -0.0625), (0.0, -0.0125), (0.0, 
    -0.00630435347557068), (0.0, 0.0)))
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0191065222024918, -0.0201073884963989), point1=(0.025, -0.025))
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0125, -0.0625), point1=(0.0183306783437729, -0.0641047060489655))
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0167790204286575, -0.0938675403594971), point1=(0.0183306783437729, 
    -0.100769072771072))
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0125, -0.125), point1=(0.0175548642873764, -0.131394624710083))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0191065222024918, 
    -0.0201073884963989), point2=(0.0125, -0.0625))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0125, -0.0625), 
    point2=(0.0167790204286575, -0.0938675403594971))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0167790204286575, 
    -0.0938675403594971), point2=(0.0125, -0.125))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[14])
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[15])
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[16])
mdb.models['Model-1'].sketches['__profile__'].EqualLengthConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[14], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[15])
mdb.models['Model-1'].sketches['__profile__'].EqualLengthConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[15], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[16])
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    -0.0161263272166252, -0.0428812503814697), value=0.0688958, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[7], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[9])
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[13], ))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[16], ))
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    -0.080347016453743, -0.075652003288269), value=0.0688958, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[9], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[11])
mdb.models['Model-1'].sketches['__profile__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__profile__'].vertices[7], points=((
    0.0158032611012459, 0.0440394522874825), (0.0125, 0.0440394522874825), (
    0.0125, 0.0), (0.0125, -0.0125), (0.0193306058645248, -0.025), (0.0125, 
    0.0), (0.0125, 0.0125), (0.0185599476099014, 0.025)))
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].RadialDimension(curve=
    mdb.models['Model-1'].sketches['__profile__'].geometry[10], radius=0.01, 
    textPoint=(-0.0148355066776276, 0.03834567964077))
mdb.models['Model-1'].sketches['__profile__'].dimensions[4].setValues(value=
    0.005)
mdb.models['Model-1'].sketches['__profile__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__profile__'].vertices[7], points=((
    0.0158032611012459, 0.0440394522874825), (0.0125, 0.0440394522874825), (
    0.0195874869823456, 0.0), (0.0193306058645248, -0.0182133316993713), (
    0.0183030515909195, -0.025), (0.0180461555719376, -0.0193559527397156), (
    0.0190737247467041, -0.0125)))
mdb.models['Model-1'].sketches['__profile__'].EqualRadiusConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[10], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[11])
mdb.models['Model-1'].sketches['__profile__'].EqualRadiusConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[11], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[12])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0190737247467041, 
    -0.0125), point2=(0.0190737247467041, 0.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[17])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[15], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0190737247467041, 
    -0.0125), point2=(0.0, -0.01938))
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[16], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[1], midpoint=
    mdb.models['Model-1'].sketches['__profile__'].vertices[16])
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, -0.01938), 
    point2=(0.0190737247467041, -0.0125))
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[16], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[1], midpoint=
    mdb.models['Model-1'].sketches['__profile__'].vertices[16])
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[18])
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[17])
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[17], ))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.01938, 0.0), 
    point2=(0.0190737247467041, -0.01938))
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[17], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[9])
mdb.models['Model-1'].sketches['__profile__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[6], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0], midpoint=
    mdb.models['Model-1'].sketches['__profile__'].vertices[17])
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[19])
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.05, -0.025), point1=(0.0564940422773361, -0.0217367187142372))
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.1, -0.025), point1=(0.105167761445045, -0.0207025185227394))
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.15, -0.025), point1=(0.1625, -0.025))
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.2125, -0.025), point1=(0.220186486840248, -0.0231156721711159))
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.292421936988831, -0.0241498723626137), point1=(0.3, -0.025))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.01938, -0.01938), 
    point2=(0.05, -0.025))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.05, -0.025), 
    point2=(0.1, -0.025))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[26])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.1, -0.025), 
    point2=(0.15, -0.025))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[27])
mdb.models['Model-1'].sketches['__profile__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__profile__'].geometry[26], 
    entity2=mdb.models['Model-1'].sketches['__profile__'].geometry[27])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.15, -0.025), 
    point2=(0.2125, -0.025))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[28])
mdb.models['Model-1'].sketches['__profile__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__profile__'].geometry[27], 
    entity2=mdb.models['Model-1'].sketches['__profile__'].geometry[28])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.2125, -0.025), 
    point2=(0.292421936988831, -0.0241498723626137))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[25])
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[26])
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[27])
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[28])
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[29])
mdb.models['Model-1'].sketches['__profile__'].EqualLengthConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[25], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[26])
mdb.models['Model-1'].sketches['__profile__'].EqualLengthConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[26], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[27])
mdb.models['Model-1'].sketches['__profile__'].EqualLengthConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[27], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[28])
mdb.models['Model-1'].sketches['__profile__'].EqualLengthConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[28], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[29])
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    0.041776642203331, 0.0171246826648712), value=0.07173390909, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[7], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[18])
mdb.models['Model-1'].sketches['__profile__'].EqualRadiusConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[10], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[20])
mdb.models['Model-1'].sketches['__profile__'].EqualRadiusConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[20], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[21])
mdb.models['Model-1'].sketches['__profile__'].EqualRadiusConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[21], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[22])
mdb.models['Model-1'].sketches['__profile__'].EqualRadiusConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[22], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[23])
mdb.models['Model-1'].sketches['__profile__'].EqualRadiusConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[23], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[24])
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].dimensions[2], ))
mdb.models['Model-1'].sketches['__profile__'].DistanceDimension(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], textPoint=(
    -0.030171737074852, -0.10698651522398), value=0.1525)
mdb.models['Model-1'].sketches['__profile__'].setAsConstruction(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[8]))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.03876, -0.03876), 
    point2=(0.03876, -0.19126))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[30])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[30])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[28], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.03876, -0.03876), 
    point2=(0.41376, -0.03876))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[31])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[30], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[31])
mdb.models['Model-1'].sketches['__profile__'].setAsConstruction(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[4]))
mdb.models['Model-1'].sketches['__profile__'].copyMirror(mirrorLine=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[8], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[9], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[10], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[11], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[12], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[14], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[15], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[18], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[19], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[20], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[21], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[22], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[23], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[24], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[25], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[26], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[27], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[28], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[29], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[30], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[31]))
mdb.models['Model-1'].sketches['__profile__'].copyMirror(mirrorLine=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[8], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[9], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[10], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[11], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[12], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[14], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[15], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[18], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[19], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[20], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[21], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[22], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[23], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[24], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[25], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[26], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[27], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[28], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[29], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[30], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[31], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[32], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[33], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[34], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[35], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[36], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[37], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[38], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[39], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[40], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[41], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[42], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[43], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[44], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[45], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[46], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[47], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[48], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[49], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[50], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[51], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[52], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[53], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[54], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[55], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[56], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[57], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[58]))
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].setAsConstruction(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[7]))
mdb.models['Model-1'].sketches['__profile__'].copyMirror(mirrorLine=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[8], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[9], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[10], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[11], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[12], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[14], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[15], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[18], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[19], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[20], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[21], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[22], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[23], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[24], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[25], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[26], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[27], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[28], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[29]))
mdb.models['Model-1'].sketches['__profile__'].copyMirror(mirrorLine=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[8], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[9], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[10], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[11], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[12], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[14], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[15], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[18], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[19], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[20], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[21], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[22], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[23], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[24], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[25], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[26], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[27], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[28], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[29], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[30], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[31], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[32], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[33], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[34], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[35], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[36], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[37], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[38], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[39], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[40], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[41], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[42], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[43], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[44], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[45], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[46], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[47], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[48], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[49], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[50], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[51], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[52], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[53], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[54]))
mdb.models['Model-1'].sketches['__profile__'].setAsConstruction(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[19], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[18], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[44], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[43], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[93], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[94]))
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].setAsConstruction(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[19], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[18], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[25], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[14], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[15], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[26], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[27], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[28], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[29]))
mdb.models['Model-1'].sketches['__profile__'].copyMirror(mirrorLine=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[8], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[9], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[10], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[11], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[12], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[14], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[15], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[18], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[19], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[20], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[21], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[22], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[23], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[24], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[25], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[26], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[27], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[28], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[29]))
mdb.models['Model-1'].sketches['__profile__'].copyMirror(mirrorLine=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[8], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[9], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[10], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[11], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[12], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[14], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[15], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[18], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[19], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[20], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[21], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[22], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[23], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[24], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[25], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[26], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[27], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[28], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[29], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[30], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[31], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[32], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[33], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[34], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[35], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[36], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[37], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[38], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[39], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[40], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[41], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[42], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[43], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[44], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[45], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[46], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[47], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[48], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[49], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[50], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[51], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[52], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[53], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[54]))
mdb.models['Model-1'].sketches['__profile__'].removeGapsAndOverlaps(geomList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[8], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[9], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[10], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[11], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[12], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[14], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[15], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[18], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[19], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[20], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[21], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[22], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[23], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[24], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[25], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[26], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[27], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[28], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[29], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[30], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[31], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[32], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[33], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[34], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[35], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[36], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[37], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[38], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[39], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[40], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[41], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[42], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[43], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[44], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[45], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[46], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[47], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[48], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[49], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[50], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[51], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[52], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[53], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[54], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[55], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[56], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[57], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[58], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[59], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[60], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[61], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[62], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[63], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[64], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[65], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[66], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[67], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[68], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[69], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[70], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[71], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[72], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[73], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[74], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[75], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[76], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[77], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[78], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[79], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[80], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[81], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[82], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[83], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[84], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[85], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[86], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[87], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[88], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[89], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[90], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[91], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[92], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[93], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[94], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[95], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[96], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[97], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[98], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[99], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[100], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[101], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[102], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[103], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[104]), tolerance=
    0.001)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.03876, 
    -0.03876), point2=(0.78876, -0.34376))
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[103], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[105], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[81])
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, -0.19126), 
    point2=(0.03876, -0.19126))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[30])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[30])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.03876, -0.19126), 
    point2=(0.03876, -0.03876))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[31])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[30], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[31])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[28], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.03876, -0.03876), 
    point2=(0.41376, -0.03876))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[32])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[31], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[32])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.41376, -0.03876), 
    point2=(0.41376, 0.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[33])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[32], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[33])
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], ))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], ))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[8], ))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 0.0), point2=(
    0.0, -0.19126))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[34])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[34])
mdb.models['Model-1'].sketches['__profile__'].dimensions[5].setValues(
    textPoint=(0.05, -0.0304849147796631))
mdb.models['Model-1'].sketches['__profile__'].dimensions[5].setValues(
    textPoint=(0.05, -0.0304849147796631))
mdb.models['Model-1'].sketches['__profile__'].dimensions[5].setValues(
    textPoint=(0.05, -0.0304849147796631))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], ))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[9], ))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 0.0), point2=(
    0.41376, 0.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[35])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[34], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[35])
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='Part-10', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Part-10'].BaseSolidExtrude(depth=0.2, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Part-10'].features['Solid extrude-1'].sketch)
mdb.models['Model-1'].parts['Part-10'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Part-10'].features['Solid extrude-1'])
mdb.models['Model-1'].sketches['__edit__'].Line(point1=(0.0, 0.0), point2=(
    0.01938, -0.01938))
mdb.models['Model-1'].sketches['__edit__'].Line(point1=(0.01938, -0.01938), 
    point2=(0.03876, -0.03876))
mdb.models['Model-1'].sketches['__edit__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__edit__'].geometry[36], 
    entity2=mdb.models['Model-1'].sketches['__edit__'].geometry[37])
mdb.models['Model-1'].sketches['__edit__'].setAsConstruction(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[36], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[37]))
mdb.models['Model-1'].sketches['__edit__'].Line(point1=(0.0, -0.03876), point2=
    (0.0375, 0.0))
mdb.models['Model-1'].sketches['__edit__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__edit__'].vertices[29], 
    entity2=mdb.models['Model-1'].sketches['__edit__'].geometry[35])
mdb.models['Model-1'].sketches['__edit__'].setAsConstruction(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[38], ))
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[37], ))
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[36], ))
mdb.models['Model-1'].sketches['__edit__'].FixedConstraint(entity=
    mdb.models['Model-1'].sketches['__edit__'].vertices[7])
mdb.models['Model-1'].sketches['__edit__'].FixedConstraint(entity=
    mdb.models['Model-1'].sketches['__edit__'].geometry[38])
mdb.models['Model-1'].sketches['__edit__'].undo()
mdb.models['Model-1'].sketches['__edit__'].undo()
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[18], ))
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[19], ))
mdb.models['Model-1'].sketches['__edit__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[38], entity2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[7])
mdb.models['Model-1'].sketches['__edit__'].undo()
mdb.models['Model-1'].sketches['__edit__'].FixedConstraint(entity=
    mdb.models['Model-1'].sketches['__edit__'].vertices[1])
mdb.models['Model-1'].sketches['__edit__'].FixedConstraint(entity=
    mdb.models['Model-1'].sketches['__edit__'].vertices[29])
mdb.models['Model-1'].sketches['__edit__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[7], entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry[38])
mdb.models['Model-1'].sketches['__edit__'].Line(point1=(0.0, 0.0), point2=(
    0.03876, -0.03876))
mdb.models['Model-1'].sketches['__edit__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[39], entity2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[7])
mdb.models['Model-1'].sketches['__edit__'].setAsConstruction(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[39], ))
mdb.models['Model-1'].sketches['__edit__'].redo()
#* Nothing to redo.
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[7], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[4]))
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[30], ))
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[33], ))
mdb.models['Model-1'].sketches['__edit__'].Line(point1=(0.0, -0.19126), point2=
    (0.03876, -0.19126))
mdb.models['Model-1'].sketches['__edit__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__edit__'].geometry[40])
mdb.models['Model-1'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[34], entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry[40])
mdb.models['Model-1'].sketches['__edit__'].Line(point1=(0.41376, 0.0), point2=(
    0.41376, -0.03876))
mdb.models['Model-1'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__edit__'].geometry[41])
mdb.models['Model-1'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[35], entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry[41])
mdb.models['Model-1'].sketches['__edit__'].setAsConstruction(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[41], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[40]))
mdb.models['Model-1'].sketches['__edit__'].copyMirror(mirrorLine=
    mdb.models['Model-1'].sketches['__edit__'].geometry[41], objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[3], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[10], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[11], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[12], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[14], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[15], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[20], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[21], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[22], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[23], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[24], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[25], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[26], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[27], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[28], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[29], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[31], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[32], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[34], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[35], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[38], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[39], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[40], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[41]))
mdb.models['Model-1'].sketches['__edit__'].copyMirror(mirrorLine=
    mdb.models['Model-1'].sketches['__edit__'].geometry[40], objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[3], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[10], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[11], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[12], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[14], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[15], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[20], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[21], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[22], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[23], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[24], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[25], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[26], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[27], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[28], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[29], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[31], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[32], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[34], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[35], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[38], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[39], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[40], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[41], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[42], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[43], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[44], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[45], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[46], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[47], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[48], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[49], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[50], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[51], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[52], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[53], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[54], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[55], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[56], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[57], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[58], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[59], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[60], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[61], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[62], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[63], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[64], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[65]))
mdb.models['Model-1'].parts['Part-10'].features['Solid extrude-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['Part-10'].regenerate()
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Part-10'].features['Solid extrude-1'].sketch)
mdb.models['Model-1'].parts['Part-10'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Part-10'].features['Solid extrude-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['Part-10'].features['Solid extrude-1'].setValues(
    depth=0.013)
mdb.models['Model-1'].parts['Part-10'].regenerate()
mdb.models['Model-1'].parts['Part-10'].regenerate()
del mdb.models['Model-1'].parts['Top_Flange']
del mdb.models['Model-1'].parts['Top_Flange-Copy']
del mdb.models['Model-1'].parts['Cap-Copy']
del mdb.models['Model-1'].parts['Cap']
mdb.models['Model-1'].parts.changeKey(fromName='Part-10', toName='Flange')
mdb.models['Model-1'].Part(name='Cap', objectToCopy=
    mdb.models['Model-1'].parts['Flange'])
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Cap'].features['Solid extrude-1'].sketch)
mdb.models['Model-1'].parts['Cap'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=mdb.models['Model-1'].parts['Cap'].features['Solid extrude-1'])
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[31], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[3], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[42], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[58]))
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[59], ))
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[32], ))
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[82], ))
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[66], ))
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[83], ))
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[90], ))
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[107], ))
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[106], ))
mdb.models['Model-1'].parts['Cap'].features['Solid extrude-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['Cap'].regenerate()
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Cap'].features['Solid extrude-1'].sketch)
mdb.models['Model-1'].parts['Cap'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=mdb.models['Model-1'].parts['Cap'].features['Solid extrude-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['Cap'].features['Solid extrude-1'].setValues(depth=
    0.0127)
mdb.models['Model-1'].parts['Cap'].regenerate()
mdb.models['Model-1'].parts['Cap'].regenerate()
mdb.models['Model-1'].rootAssembly.regenerate()
#* FeatureError: Regeneration failed
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.deleteFeatures(('Cap-Copy-1', 
    'Top_Flange-Copy-1'))
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Flange-1', 
    part=mdb.models['Model-1'].parts['Flange'])
mdb.models['Model-1'].rootAssembly.EdgeToEdge(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Long_Side-2'].edges[2], flip=
    ON, movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Flange-1'].edges[68])
mdb.models['Model-1'].rootAssembly.EdgeToEdge(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Flange-1'].edges[76], flip=
    OFF, movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Short Side With Holes-1'].edges[5])
#* FeatureError: The constraint cannot be applied because it conflicts 
#* with existing position constraints.
del mdb.models['Model-1'].rootAssembly.features['Edge to Edge-1']
mdb.models['Model-1'].rootAssembly.EdgeToEdge(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Flange-1'].edges[66], flip=
    OFF, movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Long_Side-2'].edges[2])
mdb.models['Model-1'].rootAssembly.EdgeToEdge(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Flange-1'].edges[76], flip=
    OFF, movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Short Side With Holes-1'].edges[5])
mdb.models['Model-1'].rootAssembly.deleteFeatures(('Edge to Edge-2', 
    'Edge to Edge-1'))
mdb.models['Model-1'].rootAssembly.EdgeToEdge(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Flange-1'].edges[68], flip=ON
    , movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Long_Side-2'].edges[2])
mdb.models['Model-1'].rootAssembly.EdgeToEdge(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Flange-1'].edges[76], flip=
    OFF, movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Short Side With Holes-1'].edges[5])
#* FeatureError: The constraint cannot be applied because it conflicts 
#* with existing position constraints.
mdb.models['Model-1'].rootAssembly.EdgeToEdge(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Short Side With Holes-1'].edges[5]
    , flip=OFF, movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Flange-1'].edges[76])
#* FeatureError: The constraint cannot be applied because it conflicts 
#* with existing position constraints.
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Short Side With Holes-1'].faces[0]
    , flip=OFF, movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['Flange-1'].faces[28])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Cap-1', part=
    mdb.models['Model-1'].parts['Cap'])
mdb.models['Model-1'].rootAssembly.EdgeToEdge(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].edges[10], flip=OFF, 
    movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Flange-1'].edges[9])
mdb.models['Model-1'].rootAssembly.EdgeToEdge(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].edges[15], flip=OFF, 
    movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Flange-1'].edges[14])
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=2.0)
mdb.models['Model-1'].sketches['__profile__'].ConstructionLine(point1=(0.0, 
    -1.0), point2=(0.0, 1.0))
mdb.models['Model-1'].sketches['__profile__'].FixedConstraint(entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 0.0), point2=(
    0.0, 0.143114984035492))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__profile__'].geometry[2], 
    entity2=mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[1], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 
    0.143114984035492), point2=(-0.0375000000465661, 0.143114984035492))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.0375000000465661, 
    0.143114984035492), point2=(-0.0375000000465665, 0.175000000023283))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[5])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.0375000000465665, 
    0.175000000023283), point2=(0.0874999999534339, 0.175000000023282))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0874999999534339, 
    0.175000000023282), point2=(0.0874999999534335, 0.15))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0874999999534335, 
    0.15), point2=(0.0375000000931323, 0.15))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[8])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[8])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0375000000931323, 
    0.15), point2=(0.0375000000931323, -0.137499999953434))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[9])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[8], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[9])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0375000000931323, 
    -0.137499999953434), point2=(0.0749999999767169, -0.137499999953434))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[10])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[9], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[10])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0749999999767169, 
    -0.137499999953434), point2=(0.0749999999767176, -0.175000000023283))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[11])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[10], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[11])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0749999999767176, 
    -0.175000000023283), point2=(0.0375000000465661, -0.175000000023282))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[12])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[11], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[12])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0375000000465661, 
    -0.175000000023282), point2=(0.0375000000465683, -0.2))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[13])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[12], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[13])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0375000000465683, 
    -0.2), point2=(0.0, -0.2))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[14])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[13], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[14])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[12], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, -0.2), point2=(
    0.0, -0.170151144266129))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[15])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[14], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[15])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[13], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 
    -0.170151144266129), point2=(-0.0249999999534339, -0.170151144266129))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[16])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[15], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[16])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.0249999999534339, 
    -0.170151144266129), point2=(-0.0249999999534335, -0.137499999976717))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[17])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[16], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[17])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.0249999999534335, 
    -0.137499999976717), point2=(0.0, -0.137499999979627))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[18])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[16], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 
    -0.137499999979627), point2=(0.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[19])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[18], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[19])
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], ))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], ))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], ))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], ))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], ))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0874999999534339, 
    0.175000000023282), point2=(0.0124999999767169, 0.175000000023282))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[14])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[14])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0124999999767169, 
    0.175000000023282), point2=(0.0124999999767176, -0.2))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[15])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[14], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[15])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0124999999767176, 
    -0.2), point2=(0.0375000000465683, -0.2))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[16])
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    0.0264678597450256, -0.218685314059258), value=0.01, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[13], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[11])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0375000000931323, 
    0.15), point2=(0.0124999999650754, 0.15))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[17])
mdb.models['Model-1'].sketches['__profile__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__profile__'].geometry[8], 
    entity2=mdb.models['Model-1'].sketches['__profile__'].geometry[17])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[14], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[15])
mdb.models['Model-1'].sketches['__profile__'].setAsConstruction(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[17], ))
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].EqualLengthConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[17], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[16])
mdb.models['Model-1'].sketches['__profile__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__profile__'].vertices[8], points=((
    0.0749999999767169, -0.137499999953434), (0.075, -0.1375), (0.0625, 
    -0.1375), (0.05, -0.143015787005424), (0.05, -0.145121827721596), (0.05, 
    -0.15), (0.0450813621282578, -0.15), (0.05, -0.15), (0.05, -0.15), (
    0.0564452856779099, -0.15)))
mdb.models['Model-1'].sketches['__profile__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__profile__'].vertices[6], points=((
    0.0224999999650754, 0.15), (0.025, 0.15), (0.025, 0.1375), (0.025, 0.1375), 
    (0.0375, 0.1375), (0.0375, 0.1375), (0.05, 0.15), (0.0375, 0.15), (0.0375, 
    0.1375), (0.05, 0.1375), (0.05, 0.1375), (0.0375, 0.1375), (0.025, 0.1375), 
    (0.025, 0.1375)))
mdb.models['Model-1'].sketches['__profile__'].DistanceDimension(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[8], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[10], textPoint=(
    0.129243612289429, -0.00502128899097443), value=0.0254)
mdb.models['Model-1'].sketches['__profile__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__profile__'].vertices[11], points=((
    0.0250000000116422, -0.2), (0.025, -0.2), (0.0375, -0.1125), (0.0375, 
    -0.075), (0.0375, -0.05), (0.025, -0.0125), (0.025, -0.0125), (0.025, 
    -0.0312036126852036), (0.0125, -0.0625), (0.0125, -0.05), (0.0125, 
    -0.0375)))
mdb.models['Model-1'].sketches['__profile__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__profile__'].vertices[9], points=((
    0.0564452856546274, -0.175000000023283), (0.0564452856546274, -0.175), (
    0.05, -0.025), (0.0375, 0.0375), (0.0375, 0.05), (0.0375, 0.075), (0.025, 
    0.0875), (0.025, 0.0875), (0.025, 0.075), (0.025, 0.075), (0.0125, 0.05), (
    0.0125, 0.025), (0.0125, 0.0), (0.0125, -0.0125), (0.025, -0.0125), (
    0.0375, -0.0125), (0.0375, -0.0125)))
mdb.models['Model-1'].sketches['__profile__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__profile__'].vertices[8], points=((
    0.0375000000232862, 0.112099999976717), (0.0375, 0.1125), (0.0375, 0.0875), 
    (0.0375, 0.075), (0.0375, 0.0625), (0.0375, 0.05), (0.0375, 0.05)))
mdb.models['Model-1'].sketches['__profile__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__profile__'].vertices[4], points=((
    0.0874999999534339, 0.175000000023282), (0.0875, 0.175), (0.075, 0.15), (
    0.075, 0.15), (0.0625, 0.1375), (0.0625, 0.125), (0.05, 0.1125), (0.05, 
    0.1), (0.05, 0.1), (0.05, 0.1), (0.05, 0.1)))
mdb.models['Model-1'].sketches['__profile__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__profile__'].vertices[11], points=((
    0.0125, -0.0375), (0.0125, -0.0375), (0.0125, -0.0125), (0.0125, -0.0125), 
    (0.0125, 0.0), (0.0125, 0.0)))
mdb.models['Model-1'].sketches['__profile__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__profile__'].vertices[9], points=((0.0375, 
    -0.0125), (0.0375, -0.0125), (0.0375, 0.0125), (0.025, 0.0125), (0.025, 
    0.025), (0.025, 0.025), (0.025, 0.0375), (0.0375, 0.0375)))
mdb.models['Model-1'].sketches['__profile__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__profile__'].vertices[11], points=((
    0.0125, 0.0), (0.0125, 0.0), (0.0125, 0.0125), (0.0125, 0.0125), (0.0125, 
    0.025)))
mdb.models['Model-1'].sketches['__profile__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__profile__'].vertices[8], points=((0.0375, 
    0.05), (0.0375, 0.05), (0.0293626226484776, 0.05), (0.025, 
    0.0468511432409286), (0.025, 0.0453186333179474), (0.025, 
    0.0467118173837662), (0.025, 0.0478263720870018), (0.0228475369513035, 
    0.05), (0.022722240537405, 0.05)))
mdb.models['Model-1'].sketches['__profile__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__profile__'].vertices[5], points=((0.05, 
    0.0754000000232836), (0.05, 0.075), (0.0375, 0.0786158069968224), (
    0.0339983515441418, 0.0784764885902405), (0.0302396453917027, 
    0.0780585333704948), (0.0301143564283848, 0.0777798965573311), (
    0.0276085548102856, 0.0769439786672592), (0.025, 0.075), (0.025, 
    0.0793124064803123), (0.025, 0.0812628641724586), (0.025, 
    0.0825167298316956)))
mdb.models['Model-1'].sketches['__profile__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__profile__'].vertices[10], points=((
    0.0125000000116539, 0.0374999999767159), (0.0125, 0.0375), (0.0125, 
    0.0419749841094017), (0.0125, 0.0432288572192192)))
mdb.models['Model-1'].sketches['__profile__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__profile__'].vertices[11], points=((
    0.0125, 0.025), (0.0125, 0.025), (0.0125, 0.0291576683521271), (0.0125, 
    0.0305508524179459), (0.0125, 0.0309688076376915)))
mdb.models['Model-1'].sketches['__profile__'].setAsConstruction(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[17], ))
mdb.models['Model-1'].sketches['__profile__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__profile__'].vertices[12], points=((
    0.00250000001164169, 0.1), (0.0, 0.1), (0.0, 0.0965651497244835), (0.0, 
    0.1)))
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=2.0)
mdb.models['Model-1'].sketches['__profile__'].ConstructionLine(point1=(0.0, 
    -1.0), point2=(0.0, 1.0))
mdb.models['Model-1'].sketches['__profile__'].FixedConstraint(entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 
    0.0269549936056137), point2=(0.0124999999767169, 0.0269549936056137))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0124999999767169, 
    0.0269549936056137), point2=(0.0124999999767169, 0.0224857404828072))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0124999999767169, 
    0.0224857404828072), point2=(0.00546790193766356, 0.0224857404828072))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.00546790193766356, 
    0.0224857404828072), point2=(0.00546790193766356, 0.00949373096227646))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.00546790193766356, 
    0.00949373096227646), point2=(0.0124999999767169, 0.00949373096227646))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0124999999767169, 
    0.00949373096227646), point2=(0.0124999999767169, 0.00450479984283447))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[8])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[8])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0124999999767169, 
    0.00450479984283447), point2=(0.00556136947125196, 0.00450479984283447))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[9])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[8], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[9])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.00556136947125196, 
    0.00450479984283447), point2=(0.00556136947125196, 0.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[10])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[9], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[10])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.00556136947125196, 
    0.0), point2=(0.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[11])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[10], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[11])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[9], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].EqualLengthConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].EqualLengthConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[9])
mdb.models['Model-1'].sketches['__profile__'].EqualLengthConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[8], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.00546790193766356, 
    0.0224857404828072), point2=(0.0, 0.0224857404828072))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[12])
mdb.models['Model-1'].sketches['__profile__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__profile__'].geometry[5], 
    entity2=mdb.models['Model-1'].sketches['__profile__'].geometry[12])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[10], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].DistanceDimension(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], textPoint=(
    0.0200864914804697, 0.0160934273153543), value=0.0254)
mdb.models['Model-1'].sketches['__profile__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[11], points=((
    0.00319187133572996, 0.0), (0.00319187133572996, 0.0), (
    0.00309721915982664, -0.00563973933458328), (0.0031445452477783, 
    -0.00874447636306286), (0.00309721915982664, -0.0101652890443802), (
    0.00300257443450391, -0.0125), (0.00304990052245557, -0.0136910080909729)))
mdb.models['Model-1'].sketches['__profile__'].setAsConstruction(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[12], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[11]))
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].EqualLengthConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[12], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[11])
mdb.models['Model-1'].sketches['__profile__'].setAsConstruction(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[12], ))
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    0.00347581296227872, -0.0163747649639845), value=0.005, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[8], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[9])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 
    0.0274746716022492), point2=(0.0, -0.0136910080909729))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[13])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[13])
mdb.models['Model-1'].sketches['__profile__'].sketchOptions.setValues(
    constructionGeometry=ON)
mdb.models['Model-1'].sketches['__profile__'].assignCenterline(line=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='Bolt', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Bolt'].BaseSolidRevolve(angle=360.0, 
    flipRevolveDirection=OFF, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Bolt-1', part=
    mdb.models['Model-1'].parts['Bolt'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Bolt-2', part=
    mdb.models['Model-1'].parts['Bolt'])
mdb.models['Model-1'].rootAssembly.instances['Bolt-2'].translate(vector=(
    0.800010282046925, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.Coaxial(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[6], flip=OFF, 
    movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-2'].faces[3])
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[37], flip=ON, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-2'].faces[2])
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Bolt'].features['Solid revolve-1'].sketch)
mdb.models['Model-1'].parts['Bolt'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Bolt'].features['Solid revolve-1'])
mdb.models['Model-1'].sketches['__edit__'].dimensions[0].setValues(value=
    0.0258)
mdb.models['Model-1'].parts['Bolt'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['Bolt'].regenerate()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['Bolt'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.0035)
mdb.models['Model-1'].parts['Bolt'].setMeshControls(elemShape=HEX_DOMINATED, 
    regions=mdb.models['Model-1'].parts['Bolt'].cells.getSequenceFromMask((
    '[#1 ]', ), ), technique=SYSTEM_ASSIGN)
mdb.models['Model-1'].parts['Bolt'].setMeshControls(elemShape=TET, regions=
    mdb.models['Model-1'].parts['Bolt'].cells.getSequenceFromMask(('[#1 ]', ), 
    ), technique=FREE)
mdb.models['Model-1'].parts['Bolt'].setElementType(elemTypes=(ElemType(
    elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(mdb.models['Model-1'].parts['Bolt'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Bolt'].generateMesh()
mdb.models['Model-1'].parts['Bolt'].deleteMesh()
mdb.models['Model-1'].parts['Bolt'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.007)
mdb.models['Model-1'].parts['Bolt'].generateMesh()
mdb.models['Model-1'].parts['Cap'].seedPart(deviationFactor=0.1, minSizeFactor=
    0.1, size=0.021)
mdb.models['Model-1'].parts['Cap'].generateMesh()
mdb.models['Model-1'].parts['Cap'].deleteMesh(regions=
    mdb.models['Model-1'].parts['Cap'].cells.getSequenceFromMask(('[#1 ]', ), 
    ))
mdb.models['Model-1'].parts['Cap'].setMeshControls(elemShape=HEX_DOMINATED, 
    regions=mdb.models['Model-1'].parts['Cap'].cells.getSequenceFromMask((
    '[#1 ]', ), ))
mdb.models['Model-1'].parts['Cap'].seedPart(deviationFactor=0.1, minSizeFactor=
    0.1, size=0.05)
mdb.models['Model-1'].parts['Cap'].generateMesh()
mdb.models['Model-1'].parts['Flange'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.05)
mdb.models['Model-1'].parts['Flange'].setMeshControls(elemShape=HEX_DOMINATED, 
    regions=mdb.models['Model-1'].parts['Flange'].cells.getSequenceFromMask((
    '[#1 ]', ), ))
mdb.models['Model-1'].parts['Flange'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.deleteFeatures(('Edge to Edge-7', 
    'Edge to Edge-4', 'Edge to Edge-5', 'Edge to Edge-6'))
del mdb.models['Model-1'].constraints['Cap to flange']
mdb.models['Model-1'].rootAssembly.Surface(name='Flange_Bottom_Edge', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Flange-1'].faces.getSequenceFromMask(
    ('[#78000000 ]', ), ))
mdb.models['Model-1'].rootAssembly.Coaxial(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Flange-1'].faces[18], flip=
    OFF, movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-1'].faces[5])
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[37], flip=ON, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-1'].faces[2])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Bolt-3', part=
    mdb.models['Model-1'].parts['Bolt'])
mdb.models['Model-1'].rootAssembly.instances['Bolt-3'].translate(vector=(
    0.800010295153912, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Bolt-4', part=
    mdb.models['Model-1'].parts['Bolt'])
mdb.models['Model-1'].rootAssembly.instances['Bolt-4'].translate(vector=(
    0.827510295563694, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.Coaxial(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[26], flip=OFF, 
    movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-4'].faces[3])
mdb.models['Model-1'].rootAssembly.Coaxial(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[34], flip=OFF, 
    movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-3'].faces[3])
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[37], flip=ON, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-3'].faces[2])
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[37], flip=ON, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-4'].faces[2])
mdb.models['Model-1'].rootAssembly.Surface(name='Cap_Top_Surface', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces.getSequenceFromMask(
    ('[#0 #20 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='Bolts_Top_Constraint_Surface', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-1'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-3'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-2'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-4'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), ))
mdb.models['Model-1'].Tie(adjust=ON, master=
    mdb.models['Model-1'].rootAssembly.surfaces['Cap_Top_Surface'], name=
    'Constraint-6', positionToleranceMethod=COMPUTED, slave=
    mdb.models['Model-1'].rootAssembly.surfaces['Bolts_Top_Constraint_Surface']
    , thickness=ON, tieRotations=ON)
mdb.models['Model-1'].rootAssembly.Surface(name='Flange_Bolt_Master_Surface', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Flange-1'].faces.getSequenceFromMask(
    ('[#0 #100 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='Bolt_Flange_Slave_Surface', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-4'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-3'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-1'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-2'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), ))
mdb.models['Model-1'].Tie(adjust=ON, master=
    mdb.models['Model-1'].rootAssembly.surfaces['Flange_Bolt_Master_Surface'], 
    name='Constraint-7', positionToleranceMethod=COMPUTED, slave=
    mdb.models['Model-1'].rootAssembly.surfaces['Bolt_Flange_Slave_Surface'], 
    thickness=ON, tieRotations=ON)
mdb.models['Model-1'].HomogeneousSolidSection(material='Steel', name=
    'Solid_Steel', thickness=None)
mdb.models['Model-1'].HomogeneousSolidSection(material='Aluminum-6061', name=
    'Solid_Aluminum', thickness=None)
mdb.models['Model-1'].parts['Cap'].Set(cells=
    mdb.models['Model-1'].parts['Cap'].cells.getSequenceFromMask(('[#1 ]', ), )
    , name='Cap')
mdb.models['Model-1'].parts['Cap'].SectionAssignment(offset=0.0, offsetField=''
    , offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Cap'].sets['Cap'], sectionName='Solid_Steel', 
    thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['Bolt'].Set(cells=
    mdb.models['Model-1'].parts['Bolt'].cells.getSequenceFromMask(('[#1 ]', ), 
    ), name='All_Bolt')
mdb.models['Model-1'].parts['Bolt'].SectionAssignment(offset=0.0, offsetField=
    '', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Bolt'].sets['All_Bolt'], sectionName=
    'Solid_Steel', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['Flange'].Set(cells=
    mdb.models['Model-1'].parts['Flange'].cells.getSequenceFromMask(('[#1 ]', 
    ), ), name='All_Flange')
mdb.models['Model-1'].parts['Flange'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Flange'].sets['All_Flange'], sectionName=
    'Solid_Steel', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['Cap'].sectionAssignments[0].setValues(sectionName=
    'Solid_Aluminum')
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].loads['Cap_Pressure'].suppress()
del mdb.models['Model-1'].constraints['Cap to sides']
mdb.jobs['Pressure_Box_With_Holes'].submit(consistencyChecking=OFF)
mdb.jobs['Pressure_Box_With_Holes']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'FFM5TW1', 'handle': 0, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-14_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SET-14_CNS_-ASSEMBLY_BOTTOM-1_BOTTOM_PLATE_CNS_), NOT ALL THE NODES THAT HAVE BEEN ADJUSTED WERE PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SET-14_CNS_-ASSEMBLY_BOTTOM-1_BOTTOM_PLATE_CNS_), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_BOLTS_TOP_CONSTRAINT_SURFACE-ASSEMBLY_CAP_TOP_SURFACE), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_BOLT_FLANGE_SLAVE_SURFACE-ASSEMBLY_FLANGE_BOLT_MASTER_SURFACE), NOT ALL THE NODES THAT HAVE BEEN ADJUSTED WERE PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-22_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SET-22_CNS_-ASSEMBLY_M_SET-22_CNS_), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SURF-17-ASSEMBLY_FLANGE_BOTTOM_EDGE), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '*TIE BETWEEN SURFACE PAIR (ASSEMBLY_S_SURF-45,ASSEMBLY_M_SURF-45) IS REVERTED BACK TO TYPE NODE-TO-SURFACE. THIS CASE MAY HAPPEN IF TYPE SURFACE-TO-SURFACE CANNOT FIND NODES TO TIE TOGETHER OR IF DEFAULT ACOUSTIC-STRUCTURAL TIE IS SPECIFIED INVOLVING SHELLS. PLEASE CHECK THE SURFACE DEFINITIONS OR SPECIFY TYPE=SURFACE TO SURFACE FOR ACOUSTIC-STRUCTURAL TIE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SURF-45-ASSEMBLY_M_SURF-45), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '347 nodes have been adjusted. The nodes have been identified in node set WarnNodeAdjust.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 16 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 3 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 112 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 4 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 1 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 2 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 1 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 7 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 97 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 1 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 97 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 49 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 1 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 43 INSTANCE Short Side-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 1 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 62 INSTANCE FLANGE-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 16 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 20 INSTANCE Short Side With Holes-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 17 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 44 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 33 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 45 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 49 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 46 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 65 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 47 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 81 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 48 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 17 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 6 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 33 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 5 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 49 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 4 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 65 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 3 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 81 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 2 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 97 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 1 INSTANCE Short Side-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 97 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 56 INSTANCE FLANGE-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 112 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 18 INSTANCE Short Side With Holes-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '375 nodes are either missing intersection with their respective master surface or are outside the adjust zone. The nodes have been identified in node set WarnNodeMissMasterIntersect.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '18 nodes are used more than once as a slave node in *TIE keyword. One of the *TIE constraints at each of these nodes have been removed. The nodes have been identified in node set WarnNodeOverconTieSlave.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\chs17004\\Desktop\\Abaqus Pressure Vessel\\Pressure Box with Bolts\\Pressure_Box_With_Holes.odb', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'FFM5TW1', 'handle': 4588, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'Pressure_Box_With_Holes', 
    'memory': 126.0})
mdb.jobs['Pressure_Box_With_Holes']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 8147.0, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 30.0, 'phase': STANDARD_PHASE, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Pressure_Box_With_Holes', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Pressure_Box_With_Holes']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(JOB_COMPLETED, {
    'time': 'Thu Oct  8 10:04:57 2020', 'jobName': 'Pressure_Box_With_Holes'})
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Bolt-5', part=
    mdb.models['Model-1'].parts['Bolt'])
mdb.models['Model-1'].rootAssembly.instances['Bolt-5'].translate(vector=(
    0.800010295153912, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Bolt-6', part=
    mdb.models['Model-1'].parts['Bolt'])
mdb.models['Model-1'].rootAssembly.instances['Bolt-6'].translate(vector=(
    0.827510295563694, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Bolt-7', part=
    mdb.models['Model-1'].parts['Bolt'])
mdb.models['Model-1'].rootAssembly.instances['Bolt-7'].translate(vector=(
    0.855010295973476, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Bolt-8', part=
    mdb.models['Model-1'].parts['Bolt'])
mdb.models['Model-1'].rootAssembly.instances['Bolt-8'].translate(vector=(
    0.882510296383258, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Bolt-9', part=
    mdb.models['Model-1'].parts['Bolt'])
mdb.models['Model-1'].rootAssembly.instances['Bolt-9'].translate(vector=(
    0.91001029679304, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Bolt-10', part=
    mdb.models['Model-1'].parts['Bolt'])
mdb.models['Model-1'].rootAssembly.instances['Bolt-10'].translate(vector=(
    0.937510297202822, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Bolt-11', part=
    mdb.models['Model-1'].parts['Bolt'])
mdb.models['Model-1'].rootAssembly.instances['Bolt-11'].translate(vector=(
    0.965010297612604, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.Coaxial(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[23], flip=OFF, 
    movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-5'].faces[3])
mdb.models['Model-1'].rootAssembly.Coaxial(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[25], flip=OFF, 
    movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-6'].faces[3])
mdb.models['Model-1'].rootAssembly.Coaxial(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[24], flip=OFF, 
    movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-7'].faces[3])
mdb.models['Model-1'].rootAssembly.Coaxial(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[8], flip=OFF, 
    movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-8'].faces[3])
mdb.models['Model-1'].rootAssembly.Coaxial(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[9], flip=OFF, 
    movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-9'].faces[3])
mdb.models['Model-1'].rootAssembly.Coaxial(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[10], flip=OFF, 
    movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-10'].faces[3])
mdb.models['Model-1'].rootAssembly.Coaxial(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[7], flip=OFF, 
    movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-11'].faces[3])
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[37], flip=ON, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-5'].faces[2])
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[37], flip=ON, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-6'].faces[2])
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[37], flip=ON, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-7'].faces[2])
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[37], flip=ON, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-8'].faces[2])
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[37], flip=ON, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-9'].faces[2])
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[37], flip=OFF, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-10'].faces[2])
#* FeatureError: The constraint cannot be applied because it conflicts 
#* with existing position constraints.
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[37], flip=ON, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-10'].faces[2])
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[37], flip=ON, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-11'].faces[2])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Bolt-12', part=
    mdb.models['Model-1'].parts['Bolt'])
mdb.models['Model-1'].rootAssembly.instances['Bolt-12'].translate(vector=(
    0.800010295153912, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Bolt-13', part=
    mdb.models['Model-1'].parts['Bolt'])
mdb.models['Model-1'].rootAssembly.instances['Bolt-13'].translate(vector=(
    0.827510295563694, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Bolt-14', part=
    mdb.models['Model-1'].parts['Bolt'])
mdb.models['Model-1'].rootAssembly.instances['Bolt-14'].translate(vector=(
    0.855010295973476, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Bolt-15', part=
    mdb.models['Model-1'].parts['Bolt'])
mdb.models['Model-1'].rootAssembly.instances['Bolt-15'].translate(vector=(
    0.882510296383258, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Bolt-16', part=
    mdb.models['Model-1'].parts['Bolt'])
mdb.models['Model-1'].rootAssembly.instances['Bolt-16'].translate(vector=(
    0.91001029679304, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Bolt-17', part=
    mdb.models['Model-1'].parts['Bolt'])
mdb.models['Model-1'].rootAssembly.instances['Bolt-17'].translate(vector=(
    0.937510297202822, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Bolt-18', part=
    mdb.models['Model-1'].parts['Bolt'])
mdb.models['Model-1'].rootAssembly.instances['Bolt-18'].translate(vector=(
    0.965010297612604, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Bolt-19', part=
    mdb.models['Model-1'].parts['Bolt'])
mdb.models['Model-1'].rootAssembly.instances['Bolt-19'].translate(vector=(
    0.992510298022386, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Bolt-20', part=
    mdb.models['Model-1'].parts['Bolt'])
mdb.models['Model-1'].rootAssembly.instances['Bolt-20'].translate(vector=(
    1.02001029843217, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Bolt-21', part=
    mdb.models['Model-1'].parts['Bolt'])
mdb.models['Model-1'].rootAssembly.instances['Bolt-21'].translate(vector=(
    1.04751029884195, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.Coaxial(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[5], flip=OFF, 
    movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-21'].faces[3])
mdb.models['Model-1'].rootAssembly.Coaxial(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[4], flip=OFF, 
    movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-20'].faces[3])
mdb.models['Model-1'].rootAssembly.Coaxial(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[35], flip=OFF, 
    movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-12'].faces[3])
mdb.models['Model-1'].rootAssembly.Coaxial(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[11], flip=OFF, 
    movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-13'].faces[5])
mdb.models['Model-1'].rootAssembly.Coaxial(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[12], flip=OFF, 
    movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-14'].faces[3])
mdb.models['Model-1'].rootAssembly.Coaxial(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[13], flip=OFF, 
    movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-15'].faces[5])
mdb.models['Model-1'].rootAssembly.Coaxial(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[14], flip=OFF, 
    movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-16'].faces[3])
mdb.models['Model-1'].rootAssembly.Coaxial(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[15], flip=OFF, 
    movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-17'].faces[3])
mdb.models['Model-1'].rootAssembly.Coaxial(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[22], flip=OFF, 
    movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-18'].faces[3])
mdb.models['Model-1'].rootAssembly.Coaxial(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[21], flip=OFF, 
    movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-19'].faces[3])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Bolt-22', part=
    mdb.models['Model-1'].parts['Bolt'])
mdb.models['Model-1'].rootAssembly.instances['Bolt-22'].translate(vector=(
    0.800010295153912, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Bolt-23', part=
    mdb.models['Model-1'].parts['Bolt'])
mdb.models['Model-1'].rootAssembly.instances['Bolt-23'].translate(vector=(
    0.827510295563694, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Bolt-24', part=
    mdb.models['Model-1'].parts['Bolt'])
mdb.models['Model-1'].rootAssembly.instances['Bolt-24'].translate(vector=(
    0.855010295973476, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Bolt-25', part=
    mdb.models['Model-1'].parts['Bolt'])
mdb.models['Model-1'].rootAssembly.instances['Bolt-25'].translate(vector=(
    0.882510296383258, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Bolt-26', part=
    mdb.models['Model-1'].parts['Bolt'])
mdb.models['Model-1'].rootAssembly.instances['Bolt-26'].translate(vector=(
    0.91001029679304, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Bolt-27', part=
    mdb.models['Model-1'].parts['Bolt'])
mdb.models['Model-1'].rootAssembly.instances['Bolt-27'].translate(vector=(
    0.937510297202822, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Bolt-28', part=
    mdb.models['Model-1'].parts['Bolt'])
mdb.models['Model-1'].rootAssembly.instances['Bolt-28'].translate(vector=(
    0.965010297612604, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.Coaxial(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[20], flip=OFF, 
    movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-22'].faces[3])
mdb.models['Model-1'].rootAssembly.Coaxial(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[19], flip=OFF, 
    movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-23'].faces[3])
mdb.models['Model-1'].rootAssembly.Coaxial(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[27], flip=OFF, 
    movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-24'].faces[3])
mdb.models['Model-1'].rootAssembly.Coaxial(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[28], flip=OFF, 
    movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-25'].faces[3])
mdb.models['Model-1'].rootAssembly.Coaxial(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[29], flip=OFF, 
    movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-26'].faces[5])
mdb.models['Model-1'].rootAssembly.Coaxial(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[30], flip=OFF, 
    movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-27'].faces[3])
mdb.models['Model-1'].rootAssembly.Coaxial(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[31], flip=OFF, 
    movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-28'].faces[5])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Bolt-29', part=
    mdb.models['Model-1'].parts['Bolt'])
mdb.models['Model-1'].rootAssembly.instances['Bolt-29'].translate(vector=(
    0.800010295153912, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Bolt-30', part=
    mdb.models['Model-1'].parts['Bolt'])
mdb.models['Model-1'].rootAssembly.instances['Bolt-30'].translate(vector=(
    0.827510295563694, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Bolt-31', part=
    mdb.models['Model-1'].parts['Bolt'])
mdb.models['Model-1'].rootAssembly.instances['Bolt-31'].translate(vector=(
    0.855010295973476, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Bolt-32', part=
    mdb.models['Model-1'].parts['Bolt'])
mdb.models['Model-1'].rootAssembly.instances['Bolt-32'].translate(vector=(
    0.882510296383258, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.Coaxial(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[33], flip=OFF, 
    movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-32'].faces[3])
mdb.models['Model-1'].rootAssembly.Coaxial(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[32], flip=OFF, 
    movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-31'].faces[3])
mdb.models['Model-1'].rootAssembly.Coaxial(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[16], flip=OFF, 
    movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-30'].faces[3])
mdb.models['Model-1'].rootAssembly.Coaxial(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[17], flip=OFF, 
    movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-29'].faces[3])
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[37], flip=ON, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-21'].faces[2])
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[37], flip=ON, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-20'].faces[2])
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[37], flip=ON, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-12'].faces[2])
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[37], flip=ON, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-13'].faces[2])
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[37], flip=ON, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-14'].faces[2])
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[37], flip=ON, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-15'].faces[2])
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[37], flip=ON, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-16'].faces[2])
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[37], flip=ON, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-17'].faces[2])
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[37], flip=OFF, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-29'].faces[2])
#* FeatureError: The constraint cannot be applied because it conflicts 
#* with existing position constraints.
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[37], flip=OFF, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-29'].faces[2])
#* FeatureError: The constraint cannot be applied because it conflicts 
#* with existing position constraints.
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[37], flip=ON, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-30'].faces[2])
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[37], flip=ON, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-29'].faces[2])
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[37], flip=ON, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-31'].faces[2])
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[37], flip=ON, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-32'].faces[2])
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[37], flip=ON, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-28'].faces[2])
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[37], flip=ON, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-27'].faces[2])
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[37], flip=ON, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-26'].faces[2])
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[37], flip=ON, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-25'].faces[2])
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[37], flip=ON, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-24'].faces[2])
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[37], flip=ON, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-23'].faces[2])
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[37], flip=ON, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-22'].faces[2])
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[37], flip=ON, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-19'].faces[2])
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces[37], flip=ON, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-18'].faces[2])
mdb.models['Model-1'].rootAssembly.Surface(name='Bolt_Flange_Slave_Surface', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-1'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-2'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-3'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-4'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-28'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-27'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-26'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-25'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-24'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-23'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-22'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-19'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-18'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-12'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-13'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-14'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-15'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-16'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-17'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-29'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-30'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-31'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-32'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-20'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-21'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-5'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-6'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-7'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-8'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-9'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-10'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-11'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='Bolts_Top_Constraint_Surface', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Bolt-1'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-2'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-3'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-4'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-11'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-9'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-10'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-21'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-20'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-12'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-13'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-14'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-15'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-16'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-8'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-7'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-6'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-5'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-18'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-19'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-22'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-23'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-24'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-25'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-26'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-27'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-28'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-32'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-31'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-30'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-29'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Bolt-17'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), ))
mdb.jobs['Pressure_Box_With_Holes'].submit(consistencyChecking=OFF)
mdb.jobs['Pressure_Box_With_Holes']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'FFM5TW1', 'handle': 0, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-14_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SET-14_CNS_-ASSEMBLY_BOTTOM-1_BOTTOM_PLATE_CNS_), NOT ALL THE NODES THAT HAVE BEEN ADJUSTED WERE PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SET-14_CNS_-ASSEMBLY_BOTTOM-1_BOTTOM_PLATE_CNS_), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_BOLTS_TOP_CONSTRAINT_SURFACE-ASSEMBLY_CAP_TOP_SURFACE), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_BOLT_FLANGE_SLAVE_SURFACE-ASSEMBLY_FLANGE_BOLT_MASTER_SURFACE), NOT ALL THE NODES THAT HAVE BEEN ADJUSTED WERE PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-22_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SET-22_CNS_-ASSEMBLY_M_SET-22_CNS_), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SURF-17-ASSEMBLY_FLANGE_BOTTOM_EDGE), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '*TIE BETWEEN SURFACE PAIR (ASSEMBLY_S_SURF-45,ASSEMBLY_M_SURF-45) IS REVERTED BACK TO TYPE NODE-TO-SURFACE. THIS CASE MAY HAPPEN IF TYPE SURFACE-TO-SURFACE CANNOT FIND NODES TO TIE TOGETHER OR IF DEFAULT ACOUSTIC-STRUCTURAL TIE IS SPECIFIED INVOLVING SHELLS. PLEASE CHECK THE SURFACE DEFINITIONS OR SPECIFY TYPE=SURFACE TO SURFACE FOR ACOUSTIC-STRUCTURAL TIE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SURF-45-ASSEMBLY_M_SURF-45), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2615 nodes have been adjusted. The nodes have been identified in node set WarnNodeAdjust.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 16 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 3 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 112 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 4 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 1 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 2 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 1 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 7 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 97 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 1 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 97 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 49 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 1 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 43 INSTANCE Short Side-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 1 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 62 INSTANCE FLANGE-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 16 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 20 INSTANCE Short Side With Holes-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 17 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 44 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 33 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 45 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 49 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 46 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 65 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 47 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 81 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 48 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 17 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 6 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 33 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 5 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 49 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 4 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 65 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 3 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 81 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 2 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 97 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 1 INSTANCE Short Side-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 97 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 56 INSTANCE FLANGE-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 112 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 18 INSTANCE Short Side With Holes-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '375 nodes are either missing intersection with their respective master surface or are outside the adjust zone. The nodes have been identified in node set WarnNodeMissMasterIntersect.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '18 nodes are used more than once as a slave node in *TIE keyword. One of the *TIE constraints at each of these nodes have been removed. The nodes have been identified in node set WarnNodeOverconTieSlave.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\chs17004\\Desktop\\Abaqus Pressure Vessel\\Pressure Box with Bolts\\Pressure_Box_With_Holes.odb', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'FFM5TW1', 'handle': 10152, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'Pressure_Box_With_Holes', 
    'memory': 366.0})
mdb.jobs['Pressure_Box_With_Holes']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 8147.0, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 81.0, 'phase': STANDARD_PHASE, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Pressure_Box_With_Holes', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Pressure_Box_With_Holes']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(JOB_COMPLETED, {
    'time': 'Thu Oct  8 10:21:09 2020', 'jobName': 'Pressure_Box_With_Holes'})
mdb.models['Model-1'].loads['Cap_Pressure'].resume()
mdb.models['Model-1'].rootAssembly.Surface(name='Cap Bottom Surface', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces.getSequenceFromMask(
    ('[#0 #10 ]', ), ))
mdb.jobs['Pressure_Box_With_Holes'].submit(consistencyChecking=OFF)
mdb.jobs['Pressure_Box_With_Holes']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'FFM5TW1', 'handle': 0, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-14_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SET-14_CNS_-ASSEMBLY_BOTTOM-1_BOTTOM_PLATE_CNS_), NOT ALL THE NODES THAT HAVE BEEN ADJUSTED WERE PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SET-14_CNS_-ASSEMBLY_BOTTOM-1_BOTTOM_PLATE_CNS_), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_BOLTS_TOP_CONSTRAINT_SURFACE-ASSEMBLY_CAP_TOP_SURFACE), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_BOLT_FLANGE_SLAVE_SURFACE-ASSEMBLY_FLANGE_BOLT_MASTER_SURFACE), NOT ALL THE NODES THAT HAVE BEEN ADJUSTED WERE PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-22_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SET-22_CNS_-ASSEMBLY_M_SET-22_CNS_), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SURF-17-ASSEMBLY_FLANGE_BOTTOM_EDGE), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '*TIE BETWEEN SURFACE PAIR (ASSEMBLY_S_SURF-45,ASSEMBLY_M_SURF-45) IS REVERTED BACK TO TYPE NODE-TO-SURFACE. THIS CASE MAY HAPPEN IF TYPE SURFACE-TO-SURFACE CANNOT FIND NODES TO TIE TOGETHER OR IF DEFAULT ACOUSTIC-STRUCTURAL TIE IS SPECIFIED INVOLVING SHELLS. PLEASE CHECK THE SURFACE DEFINITIONS OR SPECIFY TYPE=SURFACE TO SURFACE FOR ACOUSTIC-STRUCTURAL TIE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SURF-45-ASSEMBLY_M_SURF-45), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2615 nodes have been adjusted. The nodes have been identified in node set WarnNodeAdjust.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 16 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 3 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 112 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 4 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 1 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 2 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 1 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 7 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 97 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 1 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 97 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 49 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 1 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 43 INSTANCE Short Side-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 1 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 62 INSTANCE FLANGE-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 16 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 20 INSTANCE Short Side With Holes-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 17 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 44 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 33 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 45 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 49 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 46 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 65 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 47 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 81 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 48 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 17 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 6 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 33 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 5 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 49 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 4 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 65 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 3 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 81 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 2 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 97 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 1 INSTANCE Short Side-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 97 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 56 INSTANCE FLANGE-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 112 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 18 INSTANCE Short Side With Holes-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '375 nodes are either missing intersection with their respective master surface or are outside the adjust zone. The nodes have been identified in node set WarnNodeMissMasterIntersect.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '18 nodes are used more than once as a slave node in *TIE keyword. One of the *TIE constraints at each of these nodes have been removed. The nodes have been identified in node set WarnNodeOverconTieSlave.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\chs17004\\Desktop\\Abaqus Pressure Vessel\\Pressure Box with Bolts\\Pressure_Box_With_Holes.odb', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'FFM5TW1', 'handle': 9816, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'Pressure_Box_With_Holes', 
    'memory': 366.0})
mdb.jobs['Pressure_Box_With_Holes']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 8147.0, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 81.0, 'phase': STANDARD_PHASE, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Pressure_Box_With_Holes', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Pressure_Box_With_Holes']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(JOB_COMPLETED, {
    'time': 'Thu Oct  8 10:22:49 2020', 'jobName': 'Pressure_Box_With_Holes'})
mdb.models['Model-1'].parts['Cap'].deleteMesh()
mdb.models['Model-1'].parts['Cap'].seedPart(deviationFactor=0.1, minSizeFactor=
    0.1, size=0.1)
mdb.models['Model-1'].parts['Cap'].generateMesh()
mdb.models['Model-1'].parts['Long_Side'].deleteMesh()
mdb.models['Model-1'].parts['Long_Side'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.025)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['Long_Side'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.jobs['Pressure_Box_With_Holes'].submit(consistencyChecking=OFF)
mdb.jobs['Pressure_Box_With_Holes']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'FFM5TW1', 'handle': 0, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-14_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SET-14_CNS_-ASSEMBLY_BOTTOM-1_BOTTOM_PLATE_CNS_), NOT ALL THE NODES THAT HAVE BEEN ADJUSTED WERE PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SET-14_CNS_-ASSEMBLY_BOTTOM-1_BOTTOM_PLATE_CNS_), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_BOLTS_TOP_CONSTRAINT_SURFACE-ASSEMBLY_CAP_TOP_SURFACE), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_BOLT_FLANGE_SLAVE_SURFACE-ASSEMBLY_FLANGE_BOLT_MASTER_SURFACE), NOT ALL THE NODES THAT HAVE BEEN ADJUSTED WERE PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-22_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SET-22_CNS_-ASSEMBLY_M_SET-22_CNS_), NOT ALL THE NODES THAT HAVE BEEN ADJUSTED WERE PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SET-22_CNS_-ASSEMBLY_M_SET-22_CNS_), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SURF-17-ASSEMBLY_FLANGE_BOTTOM_EDGE), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '*TIE BETWEEN SURFACE PAIR (ASSEMBLY_S_SURF-45,ASSEMBLY_M_SURF-45) IS REVERTED BACK TO TYPE NODE-TO-SURFACE. THIS CASE MAY HAPPEN IF TYPE SURFACE-TO-SURFACE CANNOT FIND NODES TO TIE TOGETHER OR IF DEFAULT ACOUSTIC-STRUCTURAL TIE IS SPECIFIED INVOLVING SHELLS. PLEASE CHECK THE SURFACE DEFINITIONS OR SPECIFY TYPE=SURFACE TO SURFACE FOR ACOUSTIC-STRUCTURAL TIE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SURF-45-ASSEMBLY_M_SURF-45), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2711 nodes have been adjusted. The nodes have been identified in node set WarnNodeAdjust.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 31 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 3 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 62 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 3 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 30 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 3 INSTANCE BOTTOM-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 372 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 4 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 403 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 4 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 402 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 4 INSTANCE BOTTOM-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 1 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 2 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 1 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 7 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 2 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 7 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 32 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 2 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 32 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 7 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 2 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 2 INSTANCE BOTTOM-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 342 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 1 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 342 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 49 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 373 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 1 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 373 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 49 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 374 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 49 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 374 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 1 INSTANCE BOTTOM-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 32 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 43 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 63 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 44 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 64 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 44 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 94 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 44 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 125 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 45 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 126 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 45 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 156 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 45 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 187 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 46 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 188 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 46 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 218 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 46 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 249 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 47 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 250 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 47 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 280 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 47 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 311 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 48 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 312 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 48 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 1 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 43 INSTANCE Short Side-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 1 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 62 INSTANCE FLANGE-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 2 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 43 INSTANCE Short Side-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 2 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 62 INSTANCE FLANGE-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 30 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 20 INSTANCE Short Side With Holes-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 31 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 20 INSTANCE Short Side With Holes-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 63 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 6 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 64 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 6 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 94 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 5 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 125 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 5 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 126 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 5 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 156 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 4 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 187 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 4 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 188 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 4 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 218 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 3 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 249 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 3 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 250 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 3 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 280 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 2 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 311 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 2 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 312 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 2 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 342 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 1 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 373 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 1 INSTANCE Short Side-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 373 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 56 INSTANCE FLANGE-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 374 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 1 INSTANCE Short Side-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 374 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 56 INSTANCE FLANGE-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 402 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 18 INSTANCE Short Side With Holes-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 403 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 18 INSTANCE Short Side With Holes-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '957 nodes are either missing intersection with their respective master surface or are outside the adjust zone. The nodes have been identified in node set WarnNodeMissMasterIntersect.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Normal cannot be computed in 22 elements. The nodal coordinates may be incorrect or the element aspect ratio may exceed 1000 to 1. The elements have been identified in element set ErrElemNormal.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '50 nodes are used more than once as a slave node in *TIE keyword. One of the *TIE constraints at each of these nodes have been removed. The nodes have been identified in node set WarnNodeOverconTieSlave.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The geometry of 8 elements is too distorted. Check the nodal coordinates or node numbering on elements identified in element set ErrElemDistorted.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '67 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The area of 6 elements is zero, small, or negative. Check coordinates or node numbering, or modify the mesh seed. The elements have been identified in element set ErrElemAreaSmallNegZero.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The aspect ratio for 5 elements exceeds 100 to 1. The elements have been identified in element set WarnElemAspectRatio.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Error in defining normal to the element surface at a node in 22 elements. The elements have been identified in element set ErrElemShellNormal.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\chs17004\\Desktop\\Abaqus Pressure Vessel\\Pressure Box with Bolts\\Pressure_Box_With_Holes.odb', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.models['Model-1'].parts['Long_Side'].deleteMesh()
mdb.models['Model-1'].parts['Long_Side'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.05)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['Long_Side'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.jobs['Pressure_Box_With_Holes'].submit(consistencyChecking=OFF)
mdb.jobs['Pressure_Box_With_Holes']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'FFM5TW1', 'handle': 0, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-14_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SET-14_CNS_-ASSEMBLY_BOTTOM-1_BOTTOM_PLATE_CNS_), NOT ALL THE NODES THAT HAVE BEEN ADJUSTED WERE PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SET-14_CNS_-ASSEMBLY_BOTTOM-1_BOTTOM_PLATE_CNS_), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_BOLTS_TOP_CONSTRAINT_SURFACE-ASSEMBLY_CAP_TOP_SURFACE), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_BOLT_FLANGE_SLAVE_SURFACE-ASSEMBLY_FLANGE_BOLT_MASTER_SURFACE), NOT ALL THE NODES THAT HAVE BEEN ADJUSTED WERE PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-22_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SET-22_CNS_-ASSEMBLY_M_SET-22_CNS_), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SURF-17-ASSEMBLY_FLANGE_BOTTOM_EDGE), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '*TIE BETWEEN SURFACE PAIR (ASSEMBLY_S_SURF-45,ASSEMBLY_M_SURF-45) IS REVERTED BACK TO TYPE NODE-TO-SURFACE. THIS CASE MAY HAPPEN IF TYPE SURFACE-TO-SURFACE CANNOT FIND NODES TO TIE TOGETHER OR IF DEFAULT ACOUSTIC-STRUCTURAL TIE IS SPECIFIED INVOLVING SHELLS. PLEASE CHECK THE SURFACE DEFINITIONS OR SPECIFY TYPE=SURFACE TO SURFACE FOR ACOUSTIC-STRUCTURAL TIE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SURF-45-ASSEMBLY_M_SURF-45), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2615 nodes have been adjusted. The nodes have been identified in node set WarnNodeAdjust.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 16 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 3 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 112 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 4 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 1 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 2 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 1 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 7 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 97 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 1 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 97 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 49 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 1 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 43 INSTANCE Short Side-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 1 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 62 INSTANCE FLANGE-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 16 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 20 INSTANCE Short Side With Holes-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 17 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 44 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 33 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 45 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 49 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 46 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 65 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 47 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 81 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 48 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 17 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 6 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 33 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 5 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 49 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 4 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 65 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 3 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 81 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 2 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 97 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 1 INSTANCE Short Side-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 97 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 56 INSTANCE FLANGE-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 112 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 18 INSTANCE Short Side With Holes-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '375 nodes are either missing intersection with their respective master surface or are outside the adjust zone. The nodes have been identified in node set WarnNodeMissMasterIntersect.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '18 nodes are used more than once as a slave node in *TIE keyword. One of the *TIE constraints at each of these nodes have been removed. The nodes have been identified in node set WarnNodeOverconTieSlave.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '10 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\chs17004\\Desktop\\Abaqus Pressure Vessel\\Pressure Box with Bolts\\Pressure_Box_With_Holes.odb', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'FFM5TW1', 'handle': 7072, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'Pressure_Box_With_Holes', 
    'memory': 358.0})
mdb.jobs['Pressure_Box_With_Holes']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 8147.0, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 80.0, 'phase': STANDARD_PHASE, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Pressure_Box_With_Holes', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Pressure_Box_With_Holes']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(JOB_COMPLETED, {
    'time': 'Thu Oct  8 10:25:19 2020', 'jobName': 'Pressure_Box_With_Holes'})
mdb.models['Model-1'].parts['Bottom'].deleteMesh()
mdb.models['Model-1'].parts['Bottom'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.025)
mdb.models['Model-1'].parts['Bottom'].generateMesh()
mdb.models['Model-1'].parts['Bottom'].deleteMesh()
mdb.models['Model-1'].parts['Bottom'].deleteSeeds()
mdb.models['Model-1'].parts['Bottom'].deleteSeeds(regions=
    mdb.models['Model-1'].parts['Bottom'].edges.getSequenceFromMask(('[#fff ]', 
    ), ))
mdb.models['Model-1'].parts['Bottom'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].parts['Bottom'].edges.getSequenceFromMask(('[#fff ]', 
    ), ), size=0.025)
mdb.models['Model-1'].parts['Bottom'].generateMesh(regions=
    mdb.models['Model-1'].parts['Bottom'].faces.getSequenceFromMask(('[#2 ]', 
    ), ))
mdb.models['Model-1'].parts['Bottom'].generateMesh(regions=
    mdb.models['Model-1'].parts['Bottom'].faces.getSequenceFromMask(('[#1 ]', 
    ), ))
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.jobs['Pressure_Box_With_Holes'].submit(consistencyChecking=OFF)
mdb.jobs['Pressure_Box_With_Holes']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'FFM5TW1', 'handle': 0, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-14_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SET-14_CNS_-ASSEMBLY_BOTTOM-1_BOTTOM_PLATE_CNS_), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_BOLTS_TOP_CONSTRAINT_SURFACE-ASSEMBLY_CAP_TOP_SURFACE), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_BOLT_FLANGE_SLAVE_SURFACE-ASSEMBLY_FLANGE_BOLT_MASTER_SURFACE), NOT ALL THE NODES THAT HAVE BEEN ADJUSTED WERE PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-22_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SET-22_CNS_-ASSEMBLY_M_SET-22_CNS_), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SURF-17-ASSEMBLY_FLANGE_BOTTOM_EDGE), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '*TIE BETWEEN SURFACE PAIR (ASSEMBLY_S_SURF-45,ASSEMBLY_M_SURF-45) IS REVERTED BACK TO TYPE NODE-TO-SURFACE. THIS CASE MAY HAPPEN IF TYPE SURFACE-TO-SURFACE CANNOT FIND NODES TO TIE TOGETHER OR IF DEFAULT ACOUSTIC-STRUCTURAL TIE IS SPECIFIED INVOLVING SHELLS. PLEASE CHECK THE SURFACE DEFINITIONS OR SPECIFY TYPE=SURFACE TO SURFACE FOR ACOUSTIC-STRUCTURAL TIE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SURF-45-ASSEMBLY_M_SURF-45), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2596 nodes have been adjusted. The nodes have been identified in node set WarnNodeAdjust.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 16 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 5 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 112 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 11 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 1 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 1 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 1 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 7 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 97 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 6 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 97 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 49 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 1 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 43 INSTANCE Short Side-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 1 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 62 INSTANCE FLANGE-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 16 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 20 INSTANCE Short Side With Holes-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 17 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 44 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 33 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 45 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 49 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 46 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 65 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 47 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 81 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 48 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 17 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 6 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 33 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 5 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 49 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 4 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 65 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 3 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 81 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 2 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 97 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 1 INSTANCE Short Side-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 97 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 56 INSTANCE FLANGE-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 112 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 18 INSTANCE Short Side With Holes-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '375 nodes are either missing intersection with their respective master surface or are outside the adjust zone. The nodes have been identified in node set WarnNodeMissMasterIntersect.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '18 nodes are used more than once as a slave node in *TIE keyword. One of the *TIE constraints at each of these nodes have been removed. The nodes have been identified in node set WarnNodeOverconTieSlave.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '10 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\chs17004\\Desktop\\Abaqus Pressure Vessel\\Pressure Box with Bolts\\Pressure_Box_With_Holes.odb', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'FFM5TW1', 'handle': 3108, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'Pressure_Box_With_Holes', 
    'memory': 360.0})
mdb.jobs['Pressure_Box_With_Holes']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 8147.0, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 80.0, 'phase': STANDARD_PHASE, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Pressure_Box_With_Holes', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Pressure_Box_With_Holes']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(JOB_COMPLETED, {
    'time': 'Thu Oct  8 10:26:59 2020', 'jobName': 'Pressure_Box_With_Holes'})
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Bolt'].features['Solid revolve-1'].sketch)
mdb.models['Model-1'].parts['Bolt'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Bolt'].features['Solid revolve-1'])
mdb.models['Model-1'].sketches['__edit__'].ObliqueDimension(textPoint=(
    0.0172356441617012, 0.0245458353310823), value=0.04, vertex1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[1], vertex2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[2])
mdb.models['Model-1'].sketches['__edit__'].DistanceDimension(entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[4], entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry[2], textPoint=(
    0.00398248061537743, 0.0784868448972702), value=0.1)
mdb.models['Model-1'].sketches['__edit__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__edit__'].vertices[9], points=((0.0, 
    -0.0136910080909729), (0.0, -0.0125), (0.0, -0.025), (0.0, 
    -0.0331109762191772), (0.0, -0.0353008136153221), (0.0, -0.0375), (0.0, 
    -0.0389505326747894), (0.0, -0.0413489192724228), (0.0, 
    -0.0429130867123604)))
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Bolt'].features['Solid revolve-1'].sketch)
mdb.models['Model-1'].parts['Bolt'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Bolt'].features['Solid revolve-1'])
mdb.models['Model-1'].sketches['__edit__'].ObliqueDimension(textPoint=(
    0.019650099799037, 0.0249183420091867), value=0.00381, vertex1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[1], vertex2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[2])
mdb.models['Model-1'].sketches['__edit__'].ObliqueDimension(textPoint=(
    0.00662695243954659, 0.0343834981322289), value=0.006, vertex1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[1])
mdb.models['Model-1'].sketches['__edit__'].dimensions[3].setValues(value=
    0.0285)
mdb.models['Model-1'].sketches['__edit__'].dimensions[2].setValues(value=
    0.0127)
mdb.models['Model-1'].sketches['__edit__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__edit__'].vertices[9], points=((0.0, 
    -0.0136910080909729), (0.0, -0.0136910080909729), (0.0, 
    -0.0216860733926296), (0.0, -0.025), (0.000915132462978363, 
    -0.0282423235476017), (0.000976551324129105, -0.0296082086861134), (0.0, 
    -0.0309057980775833)))
mdb.models['Model-1'].sketches['__edit__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__edit__'].vertices[9], points=((0.0, 
    -0.0309057980775833), (0.0, -0.0309057980775833), (0.0, 
    -0.0339413061738014), (0.0, -0.0353448390960693), (0.0, -0.0375), (0.0, 
    -0.0375)))
mdb.models['Model-1'].parts['Bolt'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['Bolt'].regenerate()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Bolt'].features['Solid revolve-1'].sketch)
mdb.models['Model-1'].parts['Bolt'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Bolt'].features['Solid revolve-1'])
mdb.models['Model-1'].sketches['__edit__'].dimensions[2].setValues(value=
    0.01288)
mdb.models['Model-1'].sketches['__edit__'].dimensions[3].setValues(value=0.015)
mdb.models['Model-1'].parts['Bolt'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['Bolt'].regenerate()
mdb.models['Model-1'].parts['Bolt'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.01)
mdb.models['Model-1'].parts['Bolt'].generateMesh()
mdb.models['Model-1'].parts['Bolt'].deleteMesh()
mdb.models['Model-1'].parts['Bolt'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.005)
mdb.models['Model-1'].parts['Bolt'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.jobs['Pressure_Box_With_Holes'].submit(consistencyChecking=OFF)
mdb.jobs['Pressure_Box_With_Holes']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'FFM5TW1', 'handle': 0, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-14_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SET-14_CNS_-ASSEMBLY_BOTTOM-1_BOTTOM_PLATE_CNS_), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_BOLTS_TOP_CONSTRAINT_SURFACE-ASSEMBLY_CAP_TOP_SURFACE), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_BOLT_FLANGE_SLAVE_SURFACE-ASSEMBLY_FLANGE_BOLT_MASTER_SURFACE), NOT ALL THE NODES THAT HAVE BEEN ADJUSTED WERE PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-22_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SET-22_CNS_-ASSEMBLY_M_SET-22_CNS_), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SURF-17-ASSEMBLY_FLANGE_BOTTOM_EDGE), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '*TIE BETWEEN SURFACE PAIR (ASSEMBLY_S_SURF-45,ASSEMBLY_M_SURF-45) IS REVERTED BACK TO TYPE NODE-TO-SURFACE. THIS CASE MAY HAPPEN IF TYPE SURFACE-TO-SURFACE CANNOT FIND NODES TO TIE TOGETHER OR IF DEFAULT ACOUSTIC-STRUCTURAL TIE IS SPECIFIED INVOLVING SHELLS. PLEASE CHECK THE SURFACE DEFINITIONS OR SPECIFY TYPE=SURFACE TO SURFACE FOR ACOUSTIC-STRUCTURAL TIE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SURF-45-ASSEMBLY_M_SURF-45), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5668 nodes have been adjusted. The nodes have been identified in node set WarnNodeAdjust.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 16 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 5 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 112 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 11 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 1 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 1 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 1 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 7 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 97 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 6 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 97 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 49 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 1 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 43 INSTANCE Short Side-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 1 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 62 INSTANCE FLANGE-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 16 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 20 INSTANCE Short Side With Holes-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 17 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 44 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 33 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 45 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 49 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 46 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 65 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 47 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 81 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 48 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 17 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 6 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 33 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 5 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 49 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 4 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 65 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 3 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 81 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 2 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 97 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 1 INSTANCE Short Side-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 97 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 56 INSTANCE FLANGE-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 112 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 18 INSTANCE Short Side With Holes-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '375 nodes are either missing intersection with their respective master surface or are outside the adjust zone. The nodes have been identified in node set WarnNodeMissMasterIntersect.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '18 nodes are used more than once as a slave node in *TIE keyword. One of the *TIE constraints at each of these nodes have been removed. The nodes have been identified in node set WarnNodeOverconTieSlave.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '10 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\chs17004\\Desktop\\Abaqus Pressure Vessel\\Pressure Box with Bolts\\Pressure_Box_With_Holes.odb', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'FFM5TW1', 'handle': 7368, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'Pressure_Box_With_Holes', 
    'memory': 1234.0})
mdb.jobs['Pressure_Box_With_Holes']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 8147.0, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 244.0, 'phase': STANDARD_PHASE, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Pressure_Box_With_Holes', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Pressure_Box_With_Holes']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(JOB_COMPLETED, {
    'time': 'Thu Oct  8 10:39:48 2020', 'jobName': 'Pressure_Box_With_Holes'})
mdb.models['Model-1'].parts['Short Side'].deleteMesh()
mdb.models['Model-1'].parts['Short Side'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.025)
mdb.models['Model-1'].parts['Short Side'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.jobs['Pressure_Box_With_Holes'].submit(consistencyChecking=OFF)
mdb.jobs['Pressure_Box_With_Holes']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'FFM5TW1', 'handle': 0, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-14_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SET-14_CNS_-ASSEMBLY_BOTTOM-1_BOTTOM_PLATE_CNS_), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_BOLTS_TOP_CONSTRAINT_SURFACE-ASSEMBLY_CAP_TOP_SURFACE), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_BOLT_FLANGE_SLAVE_SURFACE-ASSEMBLY_FLANGE_BOLT_MASTER_SURFACE), NOT ALL THE NODES THAT HAVE BEEN ADJUSTED WERE PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-22_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SET-22_CNS_-ASSEMBLY_M_SET-22_CNS_), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SURF-17-ASSEMBLY_FLANGE_BOTTOM_EDGE), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '*TIE BETWEEN SURFACE PAIR (ASSEMBLY_S_SURF-45,ASSEMBLY_M_SURF-45) IS REVERTED BACK TO TYPE NODE-TO-SURFACE. THIS CASE MAY HAPPEN IF TYPE SURFACE-TO-SURFACE CANNOT FIND NODES TO TIE TOGETHER OR IF DEFAULT ACOUSTIC-STRUCTURAL TIE IS SPECIFIED INVOLVING SHELLS. PLEASE CHECK THE SURFACE DEFINITIONS OR SPECIFY TYPE=SURFACE TO SURFACE FOR ACOUSTIC-STRUCTURAL TIE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'PLEASE MAKE SURE THAT THE MESH DENSITY OF THE SLAVE SURFACE IN THE TIE PAIR (ASSEMBLY_S_SURF-45,ASSEMBLY_M_SURF-45) IS FINER THAN THE MASTER SURFACE.  THE ANALYSIS MAY RUN SLOWER, MAY YIELD INACCURATE RESULTS, AND MAY REQUIRE MORE MEMORY IF THIS IS NOT THE CASE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SURF-45-ASSEMBLY_M_SURF-45), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5671 nodes have been adjusted. The nodes have been identified in node set WarnNodeAdjust.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 16 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 5 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 112 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 11 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 1 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 1 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 1 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 13 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 97 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 6 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 97 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 169 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 1 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 157 INSTANCE Short Side-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 1 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 62 INSTANCE FLANGE-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 16 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 20 INSTANCE Short Side With Holes-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 17 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 159 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 33 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 161 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 49 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 163 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 65 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 165 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 81 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 167 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 17 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 11 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 33 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 9 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 49 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 7 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 65 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 5 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 81 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 3 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 97 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 1 INSTANCE Short Side-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 97 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 56 INSTANCE FLANGE-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 112 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 18 INSTANCE Short Side With Holes-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '495 nodes are either missing intersection with their respective master surface or are outside the adjust zone. The nodes have been identified in node set WarnNodeMissMasterIntersect.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '18 nodes are used more than once as a slave node in *TIE keyword. One of the *TIE constraints at each of these nodes have been removed. The nodes have been identified in node set WarnNodeOverconTieSlave.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '10 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\chs17004\\Desktop\\Abaqus Pressure Vessel\\Pressure Box with Bolts\\Pressure_Box_With_Holes.odb', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'FFM5TW1', 'handle': 7376, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'Pressure_Box_With_Holes', 
    'memory': 1238.0})
mdb.jobs['Pressure_Box_With_Holes']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 8147.0, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 244.0, 'phase': STANDARD_PHASE, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Pressure_Box_With_Holes', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Pressure_Box_With_Holes']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(JOB_COMPLETED, {
    'time': 'Thu Oct  8 10:41:52 2020', 'jobName': 'Pressure_Box_With_Holes'})
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=0.04, name='__profile__', 
    sheetSize=1.82, transform=
    mdb.models['Model-1'].parts['Cap'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['Cap'].faces[36], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['Cap'].edges[10], 
    sketchOrientation=RIGHT, origin=(0.41376, -0.19126, 0.0127)))
mdb.models['Model-1'].parts['Cap'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(-0.37, 0.15), 
    point2=(0.37, -0.15))
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    -0.25847419453621, 0.207878981957435), value=0.75, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[75], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[72])
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    -0.42916470123291, 0.0863149811124789), value=0.305, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[72], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[73])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.38, 0.19126), 
    point2=(-0.38, 0.155))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[46])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[46])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[76], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.38, 0.155), 
    point2=(-0.413759999954254, 0.155))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[47])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[46], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[47])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[77], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[8])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.41376, -0.15), 
    point2=(0.37, -0.15))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[48])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[48])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[78], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.37, -0.15), 
    point2=(0.37, -0.191259999996162))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[49])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[48], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[49])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[79], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].EqualLengthConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[47], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[48])
mdb.models['Model-1'].sketches['__profile__'].EqualLengthConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[46], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[49])
mdb.models['Model-1'].sketches['__profile__'].setAsConstruction(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[46], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[47], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[48], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[49]))
mdb.models['Model-1'].parts['Cap'].ShellExtrude(depth=0.1, 
    flipExtrudeDirection=ON, sketch=
    mdb.models['Model-1'].sketches['__profile__'], sketchOrientation=RIGHT, 
    sketchPlane=mdb.models['Model-1'].parts['Cap'].faces[36], sketchPlaneSide=
    SIDE1, sketchUpEdge=mdb.models['Model-1'].parts['Cap'].edges[10])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].parts['Cap'].features['Shell extrude-1'].setValues(
    flipExtrudeDirection=False)
mdb.models['Model-1'].parts['Cap'].regenerate()
mdb.models['Model-1'].parts['Cap'].features['Shell extrude-1'].restore()
mdb.models['Model-1'].parts['Cap'].regenerate()
mdb.models['Model-1'].parts['Cap'].features['Shell extrude-1'].setValues(
    flipExtrudeDirection=True)
mdb.models['Model-1'].parts['Cap'].regenerate()
mdb.models['Model-1'].parts['Cap'].features['Shell extrude-1'].setValues(
    keepInternalBoundaries=True)
mdb.models['Model-1'].parts['Cap'].regenerate()
mdb.models['Model-1'].parts['Cap'].regenerate()
mdb.models['Model-1'].parts['Cap'].RemoveFaces(deleteCells=False, faceList=
    mdb.models['Model-1'].parts['Cap'].faces.getSequenceFromMask(mask=(
    '[#ca ]', ), ))
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.Surface(name='Cap Bottom Surface', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Cap-1'].faces.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['Model-1'].parts['Cap'].seedPart(deviationFactor=0.1, minSizeFactor=
    0.1, size=0.01)
mdb.models['Model-1'].parts['Cap'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.jobs['Pressure_Box_With_Holes'].submit(consistencyChecking=OFF)
mdb.jobs['Pressure_Box_With_Holes']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'FFM5TW1', 'handle': 0, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-14_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SET-14_CNS_-ASSEMBLY_BOTTOM-1_BOTTOM_PLATE_CNS_), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_BOLTS_TOP_CONSTRAINT_SURFACE-ASSEMBLY_CAP_TOP_SURFACE), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_BOLT_FLANGE_SLAVE_SURFACE-ASSEMBLY_FLANGE_BOLT_MASTER_SURFACE), NOT ALL THE NODES THAT HAVE BEEN ADJUSTED WERE PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'SLAVE SURFACE ASSEMBLY_S_SET-22_CNS_ IS A NODE-BASED SURFACE USED WITH SURFACE TO SURFACE APPROACH.  IN ORDER TO OBTAIN IMPROVED STRESS ACCURACY WITH THIS APPROACH, AN ELEMENT-BASED SURFACE SHOULD BE USED INSTEAD.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SET-22_CNS_-ASSEMBLY_M_SET-22_CNS_), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SURF-17-ASSEMBLY_FLANGE_BOTTOM_EDGE), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '*TIE BETWEEN SURFACE PAIR (ASSEMBLY_S_SURF-45,ASSEMBLY_M_SURF-45) IS REVERTED BACK TO TYPE NODE-TO-SURFACE. THIS CASE MAY HAPPEN IF TYPE SURFACE-TO-SURFACE CANNOT FIND NODES TO TIE TOGETHER OR IF DEFAULT ACOUSTIC-STRUCTURAL TIE IS SPECIFIED INVOLVING SHELLS. PLEASE CHECK THE SURFACE DEFINITIONS OR SPECIFY TYPE=SURFACE TO SURFACE FOR ACOUSTIC-STRUCTURAL TIE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'PLEASE MAKE SURE THAT THE MESH DENSITY OF THE SLAVE SURFACE IN THE TIE PAIR (ASSEMBLY_S_SURF-45,ASSEMBLY_M_SURF-45) IS FINER THAN THE MASTER SURFACE.  THE ANALYSIS MAY RUN SLOWER, MAY YIELD INACCURATE RESULTS, AND MAY REQUIRE MORE MEMORY IF THIS IS NOT THE CASE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SURF-45-ASSEMBLY_M_SURF-45), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5671 nodes have been adjusted. The nodes have been identified in node set WarnNodeAdjust.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 16 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 5 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 112 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 11 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 1 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 1 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 1 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 13 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 97 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 6 INSTANCE BOTTOM-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 97 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 169 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 1 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 157 INSTANCE Short Side-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 1 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 62 INSTANCE FLANGE-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 16 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 20 INSTANCE Short Side With Holes-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 17 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 159 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 33 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 161 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 49 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 163 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 65 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 165 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 81 INSTANCE LONG_SIDE-1 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 167 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 17 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 11 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 33 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 9 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 49 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 7 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 65 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 5 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 81 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 3 INSTANCE Short Side-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 97 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 1 INSTANCE Short Side-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 97 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 56 INSTANCE FLANGE-1 IS REMOVED.  CHECK IF THIS IS ACCEPTABLE.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: NODE 112 INSTANCE LONG_SIDE-2 IS USED MORE THAN ONCE AS A SLAVE NODE IN THE *TIE KEYWORD.  THE CONSTRAINT BETWEEN THIS NODE AND THE MASTER SURFACE WITH NODE 18 INSTANCE Short Side With Holes-1 IS REMOVED.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '495 nodes are either missing intersection with their respective master surface or are outside the adjust zone. The nodes have been identified in node set WarnNodeMissMasterIntersect.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '18 nodes are used more than once as a slave node in *TIE keyword. One of the *TIE constraints at each of these nodes have been removed. The nodes have been identified in node set WarnNodeOverconTieSlave.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\chs17004\\Desktop\\Abaqus Pressure Vessel\\Pressure Box with Bolts\\Pressure_Box_With_Holes.odb', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'FFM5TW1', 'handle': 5000, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'Pressure_Box_With_Holes', 
    'memory': 1344.0})
mdb.jobs['Pressure_Box_With_Holes']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 8147.0, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 257.0, 'phase': STANDARD_PHASE, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Pressure_Box_With_Holes', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Pressure_Box_With_Holes']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Pressure_Box_With_Holes'})
mdb.jobs['Pressure_Box_With_Holes']._Message(JOB_COMPLETED, {
    'time': 'Thu Oct  8 10:48:13 2020', 'jobName': 'Pressure_Box_With_Holes'})
# Save by chs17004 on 2020_10_08-10.53.51; build 2019 2018_09_24-14.41.51 157541
